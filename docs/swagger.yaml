basePath: /api/v1
definitions:
  auth.LoginDTO:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  auth.RegisterDTO:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    - name
    - password
    type: object
  models.Order:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      products:
        items:
          $ref: '#/definitions/models.Product'
        type: array
      status:
        $ref: '#/definitions/models.OrderStatus'
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.OrderStatus:
    enum:
    - pending
    - processing
    - shipped
    - delivered
    - cancelled
    type: string
    x-enum-varnames:
    - OrderStatusPending
    - OrderStatusProcessing
    - OrderStatusShipped
    - OrderStatusDelivered
    - OrderStatusCancelled
  models.Product:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      price:
        type: integer
      stock:
        type: integer
      updated_at:
        type: string
    type: object
  orders.PlaceOrderDTO:
    properties:
      products:
        items:
          $ref: '#/definitions/orders.ProductOrder'
        type: array
    type: object
  orders.ProductOrder:
    properties:
      productID:
        type: integer
      quantity:
        minimum: 1
        type: integer
    required:
    - quantity
    type: object
  products.CreateProduct:
    properties:
      description:
        type: string
      name:
        type: string
      price:
        type: integer
      stock:
        type: integer
    required:
    - description
    - name
    - price
    - stock
    type: object
  products.UpdateProduct:
    properties:
      description:
        type: string
      name:
        type: string
      price:
        type: integer
      stock:
        type: integer
    type: object
  utils.APIResponse:
    properties:
      data: {}
      error:
        type: string
      message:
        type: string
      status:
        type: integer
    type: object
host: localhost:4000
info:
  contact: {}
  description: Your API description.
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a JWT token
      parameters:
      - description: User login credentials
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/auth.LoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: JWT Token
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: Login a user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Registers a new user with email and password, with optional admin
        privileges
      parameters:
      - description: User registration details
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterDTO'
      - description: Set to true to register user as admin
        in: query
        name: admin
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: Register a new user
      tags:
      - auth
  /orders:
    get:
      description: Allows a user to view their orders
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Order'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: List user's orders
      tags:
      - orders
    post:
      consumes:
      - application/json
      description: Allows a user to place an order for one or more products
      parameters:
      - description: List of products to order
        in: body
        name: products
        required: true
        schema:
          $ref: '#/definitions/orders.PlaceOrderDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Order'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Place an order
      tags:
      - orders
  /orders/{id}/cancel:
    put:
      description: Allows a user to cancel a pending order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Cancel an order
      tags:
      - orders
  /products:
    get:
      description: Retrieve all products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Product'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: List all products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: 'Admin only: Creates a new product'
      parameters:
      - description: Product details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/products.CreateProduct'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Product'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Create a new product
      tags:
      - products
  /products/{id}:
    delete:
      description: 'Admin only: Delete a product by ID'
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Delete a product
      tags:
      - products
    get:
      description: Retrieve a product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Product'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Get a product
      tags:
      - products
    put:
      consumes:
      - application/json
      description: 'Admin only: Update a product by ID'
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated product details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/products.UpdateProduct'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Product'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Update a product
      tags:
      - products
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
